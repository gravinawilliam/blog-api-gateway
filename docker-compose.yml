version: '3.7'

volumes:
  kong_data: {}

networks:
  blog-net:
    external: true

services:
  kong-migrations:
    container_name: kong-migrations
    image: "kong:2.3.2-alpine"
    command: kong migrations bootstrap
    depends_on:
      - db
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_DATABASE: ${POSTGRES_DB}
      KONG_PG_USER: ${POSTGRES_USER}
      KONG_PG_PASSWORD: ${POSTGRES_PASSWORD}
    networks:
      - blog-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    container_name: kong-migrations-up
    image: "kong:2.3.2-alpine"
    command: kong migrations up && kong migrations finish
    depends_on:
      - db
    environment:
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    networks:
      - blog-net
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong:
    container_name: kong
    image: "kong:2.3.2-alpine"
    user: "kong"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: ${KONG_ADMIN_ACCESS_LOG}
      KONG_ADMIN_ERROR_LOG: ${KONG_ADMIN_ERROR_LOG}
      KONG_ADMIN_LISTEN: ${KONG_ADMIN_LISTEN}
      KONG_CASSANDRA_CONTACT_POINTS: ${KONG_CASSANDRA_CONTACT_POINTS}
      KONG_DATABASE: ${KONG_DATABASE}
      KONG_PG_DATABASE: ${KONG_PG_DATABASE}
      KONG_PG_HOST: ${KONG_PG_HOST}
      KONG_PG_USER: ${KONG_PG_USER}
      KONG_PROXY_ACCESS_LOG: ${KONG_PROXY_ACCESS_LOG}
      KONG_PROXY_ERROR_LOG: ${KONG_PROXY_ERROR_LOG}
      KONG_PG_PASSWORD: ${KONG_PG_PASSWORD}
    networks:
      - blog-net
    ports:
      - "8000:8000/tcp"
      - "127.0.0.1:8001:8001/tcp"
      - "8443:8443/tcp"
      - "127.0.0.1:8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  db:
    container_name: db
    image: 'bitnami/postgresql:latest'
    environment:
      POSTGRESQL_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRESQL_USERNAME: ${POSTGRES_USER}
      POSTGRESQL_DATABASE: ${POSTGRES_DB}
      POSTGRESQL_TIMEZONE: America/SAO_PAULO
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: on-failure
    networks:
      - blog-net
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga-prepare:
    container_name: konga-prepare
    image: pantsel/konga:latest
    command: "-c prepare -a postgres -u postgresql://$POSTGRES_USER:$POSTGRES_PASSWORD@$DB_HOST:5432/$DB_DATABASE"
    networks:
      - blog-net
    restart: on-failure
    depends_on:
      - db

  konga:
    container_name: konga
    image: pantsel/konga:latest
    restart: always
    networks:
      - blog-net
    environment:
      DB_ADAPTER: ${DB_ADAPTER}
      DB_HOST: ${DB_HOST}
      DB_USER: ${POSTGRES_USER}
      DB_PASSWORD: ${POSTGRES_PASSWORD}
      TOKEN_SECRET: ${TOKEN_SECRET}
      DB_DATABASE: ${DB_DATABASE}
      NODE_ENV: ${NODE_ENV}
    depends_on:
      - db
    ports:
      - "1337:1337"

  sonarqube:
    container_name: sonarqube
    image:  sonarqube:latest
    networks:
      - blog-net
    ports:
      - "${SONAR_PORT}:${SONAR_PORT}"
      -  "9092:9092"

  mongodb:
    container_name: mongodb
    image: 'bitnami/mongodb:latest'
    environment:
      MONGODB_USERNAME: ${MONGODB_USERNAME}
      MONGODB_PASSWORD: ${MONGODB_PASSWORD}
      MONGODB_ROOT_PASSWORD: ${MONGODB_ROOT_PASSWORD}
      MONGODB_ROOT_USER : ${MONGODB_ROOT_USER}
    restart: on-failure
    ports:
      - "${MONGODB_PORT}:${MONGODB_PORT}"
    networks:
      - blog-net